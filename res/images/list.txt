firstsecondrest([X,Y|Z],X,Y,Z).
% Factorial---------------------------------------------------
factorial(0,1) :- !.
factorial(N,FactN) :-
N > 0,
M is N-1,
factorial(M,FactM),
FactN is N*FactM.
%Fibonacii----------------------------------------------------
fib(1,1) :- !.
fib(2,1) :- !.
fib(N,F) :- N>2,
N1 is N-1, fib(N1,F1),
N2 is N-2, fib(N2,F2),
F is F1+F2.
%BubbleSort---------------------------------------------------
bubblesort([],[]).
bubblesort([X],[X]).
bubblesort(List,Sorted) :- swap(List,List1),bubblesort(List1,Sorted).
bubblesort(List,List).
swap([X,Y|R],[Y,X|R]) :- X>Y.
swap([Z|R],[Z|R1]) :- swap(R,R1).
%MergeSort-----------------------------------------------------

msort([First,Second|Rest],Result) :-
	partition([First,Second|Rest],L1,L2),
	msort(L1,A1),
	msort(L2,A2),
	merge(A1,A2,Result).
msort(X,X).

partition([First,Second|Rest],[First|F],[Second|S]) :-partition(Rest,F,S).
partition(List,List,[]).
%QuickSort----------------------------------------------------
quicksort([Head|Tail],Sorted) :-
pivoting(Head,Tail,Less,Greater),
quicksort(Less,SortedLess),
quicksort(Greater,SortedGreater),
append(SortedLess,[Head|SortedGreater],Sorted).

quicksort([],[]).


pivoting(P,[Head|Tail],[Head|Less],Greater) :-Head =< P, pivoting(P,Tail,Less,Greater).

pivoting(P,[Head|Tail],Less,[Head|Greater]) :-Head > P, pivoting(P,Tail,Less,Greater).

pivoting(_,[],[],[]).

%--------------------------------------------------------------
%----------------AI--------------------------------------------
%--------------------------------------------------------------
initial_state(state(door,onfloor,window,hasnot)).
goal_state(state(middle,onbox,middle,has)).

do( state(middle, onbox, middle, hasnot),   % grab banana
    grab,
    state(middle, onbox, middle, has)).

do( state(L, onfloor, L, Banana),           % climb box
    climb,
    state(L, onbox, L, Banana)).

do( state(L1, onfloor, L1, Banana),         % push box from L1 to L2
    push(L1, L2),
    state(L2, onfloor, L2, Banana)).

do( state(L1, onfloor, Box, Banana),        % walk from L1 to L2
    walk(L1, L2),
    state(L2, onfloor, Box, Banana) ).


path(Goal,Goal,[]):-!.
path(Start,Goal,[H|T]):-do(Start,H,Next_state),path(Next_state,Goal,T).

write_list([]):-!.
write_list([H|T]):-write_action(H),write_list(T).

write_action(grab):-write('monkey grab the banana'),nl.
write_action(climb):-write('monkey climb the box'),nl.
write_action(push(L1,L2)):-write('monkey push the box from '),write(L1),write(' to '),write(L2),nl.
write_action(walk(L1,L2)):-write('monkey walk from '),write(L1),write(' to '),write(L2),nl.

go:-initial_state(Start),goal_state(Goal),path(Start,Goal,List),write_list(List),!.
% ------------------------------------------------------------------------
initial_state(state(3,3,left,0,0)).
goal_state(state(0,0,right,3,3)).

legal(CL,ML,CR,MR):-
ML>=0,CL>=0,MR>=0,CR>=0,
(ML>=CL;ML=0),(MR>=CR;MR=0).

move(state(CL,ML,left,CR,MR),action1,state(CL,ML2,right,CR,MR2)):-
MR2 is MR+2,ML2 is ML-2,legal(CL,ML2,CR,MR2).

move(state(CL,ML,left,CR,MR),action2,state(CL2,ML,right,CR2,MR)):-
CR2 is CR+2,CL2 is CL-2,legal(CL2,ML,CR2,MR).

move(state(CL,ML,left,CR,MR),action3,state(CL1,ML1,right,CR1,MR1)):-
MR1 is MR+1,CR1 is CR+1,ML1 is ML-1,CL1 is CL-1,legal(CL1,ML1,CR1,MR1).

move(state(CL,ML,left,CR,MR),action4,state(CL,ML1,right,CR,MR1)):-
MR1 is MR+1,ML1 is ML-1,legal(CL,ML1,CR,MR1).

move(state(CL,ML,left,CR,MR),action5,state(CL1,ML,right,CR1,MR)):-
CR1 is CR+1,CL1 is CL-1,legal(CL1,ML,CR1,MR).

move(state(CL,ML,right,CR,MR),action6,state(CL,ML2,left,CR,MR2)):-
MR2 is MR-2,ML2 is ML+2,legal(CL,ML2,CR,MR2).


move(state(CL,ML,right,CR,MR),action7,state(CL2,ML,left,CR2,MR)):-
CR2 is CR-2,CL2 is CL+2,legal(CL2,ML,CR2,MR).

move(state(CL,ML,right,CR,MR),action8,state(CL1,ML1,left,CR1,MR1)):-
MR1 is MR-1,CR1 is CR-1,ML1 is ML+1,CL1 is CL+1,legal(CL1,ML1,CR1,MR1).


move(state(CL,ML,right,CR,MR),action9,state(CL,ML1,left,CR,MR1)):-
MR1 is MR-1,ML1 is ML+1,legal(CL,ML1,CR,MR1).

move(state(CL,ML,right,CR,MR),action10,state(CL1,ML,left,CR1,MR)):-
CR1 is CR-1,CL1 is CL+1,legal(CL1,ML,CR1,MR).

path(Goal,Goal,List,_):-!.

path(Start,Goal,[H|T],StateList):-move(Start,H,Next_state),
not(member(Next_state,StateList)),
path(Next_state,Goal,T,[Next_state|StateList]),!.

member(X,[X|T]).
member(X,[H|T]):-member(X,T).

write_list([]):-!.
write_list([H|T]):-write_action(H),write_list(T).

write_action(action1):-write('Two missionaries cross the river to right'),nl.
write_action(action2):-write('Two Cannibales cross the river to right '),nl.
write_action(action3):-write('One missionaries and one canibales cross the river to right'),nl.
write_action(action4):-write('One missionarie cross the river to right'),nl.
write_action(action5):-write('One cannibale cross the river to right'),nl.
write_action(action6):-write('Two missionaries cross the river to left'),nl.
write_action(action7):-write('Two Cannibales cross the river to left '),nl.
write_action(action8):-write('One missionaries and one canibales cross the river to left'),nl.
write_action(action9):-write('One missionarie cross the river to left'),nl.
write_action(action10):-write('One cannibale cross the river to left'),nl.

go:-initial_state(Start),goal_state(Goal),path(Start,Goal,List,[Start]),write_list(List).

%-------------------------------------------------------------------------
intial_state(state(0,0)).
goal_state(state(4,_)).

%fill(start_state_of_jugs,action1-6,final_state_of_jugs).
fill(state(0,0),action1,state(5,0)).
fill(state(5,0),action2,state(2,3)).
fill(state(2,3),action3,state(2,0)).
fill(state(2,0),action4,state(0,2)).
fill(state(0,2),action5,state(5,2)).
fill(state(5,2),action6,state(4,3)).

can_fill(Goal,Goal,[]):-!.
can_fill(Start,Goal,[H|T]):-fill(Start,H,Next_state),can_fill(Next_state,Goal,T).

write_action_list([]):-!.
write_action_list([H|T]):-write_action(H),write_action_list(T).

write_action(action1):-write('Fill 5l bottle'),nl.
write_action(action2):-write('Fill 3l bottle from 5l bottle'),nl.
write_action(action3):-write('Now you have 2l in 5l bottle'),nl.
write_action(action4):-write('Fill those 2l to 3l bottle'),nl.
write_action(action5):-write('Fill 5l bottle again'),nl.
write_action(action6):-write('Fill 3l bottle from 5l bottle.Now you have 4ls in 5l bottle'),nl.

go:-intial_state(Start),goal_state(Goal),can_fill(Start,Goal,List),write_action_list(List),!.
%--------------------------------------------------------------------------------
%state(farmer,wolf,goat,cabbage)
initial_state(state(east,east,east,east)).
goal_state(state(west,west,west,west)).

unsafe(state(X,Y,Y,_)):-opposite(X,Y).
unsafe(state(X,_,Y,Y)):-opposite(X,Y).

move(state(X,X,G,C),action1(X,Y),state(Y,Y,G,C)):-opposite(X,Y),not(unsafe(state(Y,Y,G,C))).
move(state(X,W,X,C),action2(X,Y),state(Y,W,Y,C)):-opposite(X,Y),not(unsafe(state(Y,W,Y,C))).
move(state(X,W,G,X),action3(X,Y),state(Y,W,G,Y)):-opposite(X,Y),not(unsafe(state(Y,W,G,Y))).
move(state(X,W,G,C),action4(X,Y),state(Y,W,G,C)):-opposite(X,Y),not(unsafe(state(Y,W,G,C))).


opposite(east,west).
opposite(west,east).

path(Goal,Goal,List,_):-!.

path(Start,Goal,[H|T],StateList):-move(Start,H,Next_state),
not(member(Next_state,StateList)),
path(Next_state,Goal,T,[Next_state|StateList]),!.

member(X,[X|T]).
member(X,[H|T]):-member(X,T).

write_list([]):-!.
write_list([H|T]):-write_action(H),write_list(T).

write_action(action1(X,Y)):-write('Farmer and wolf cross the river from '),write(X),write(' to '),write(Y),nl.
write_action(action2(X,Y)):-write('Farmer and Goat cross the river from '),write(X),write(' to '),write(Y),nl.
write_action(action3(X,Y)):-write('Farmer and Cabbage cross the river from '),write(X),write(' to '),write(Y),nl.
write_action(action4(X,Y)):-write('Farmer cross the river from '),write(X),write(' to '),write(Y),nl.


go:-initial_state(Start),goal_state(Goal),path(Start,Goal,List,[Start]),write_list(List).
%---------------------------============---------------------------------------
